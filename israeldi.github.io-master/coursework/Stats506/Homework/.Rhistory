}
recs_tib %>%
transmute(State=REPORTABLE_DOMAIN, Type=TYPEHUQ, Weight = NWEIGHT) %>%
mutate(State=decode_all_states(State), Type=decode_all_house_types(Type)) %>%
group_by(State, Type) %>%
summarize(Homes=sum(Weight)) #%>%
recs_tib %>%
transmute(State=REPORTABLE_DOMAIN, Type=TYPEHUQ, Weight = NWEIGHT) %>%
mutate(State=decode_all_states(State), Type=decode_all_house_types(Type)) %>%
group_by(State, Type) %>%
summarize(Homes=sum(Weight)) %>%
tidyr::spread(Type,Homes) %>%
mutate(
Total = ApartmentFew + ApartmentMany + MobileHome +
SingleFamilyAttached + SingleFamilyDetached,
ApartmentFew         = 100*ApartmentFew/Total,
ApartmentMany        = 100*ApartmentMany/Total,
MobileHome           = 100*MobileHome/Total,
SingleFamilyAttached = 100*SingleFamilyAttached/Total,
SingleFamilyDetached = 100*SingleFamilyDetached/Total
)
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
mutate(MeanKWH = mean(KWH, na.rm=TRUE)) %>% summarise()
# Question 3
library(readr)
library(tidyverse)
recs2015 = read_csv("recs2015_public_v3.csv")
# a)
divisionStuccoWall = recs2015  %>% group_by(DIVISION) %>% tally(WALLTYPE) %>% mutate(Proportion = n / sum(n)) %>%
filter(Proportion %in% c(min(Proportion),max(Proportion)))
# b)
# 'UATYP10'
#divisionEne
divisionEnergy = recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION) %>%
mutate(MeanKWH = mean(KWH, na.rm=TRUE)) #%>% summarise(MeanKWH_Urban = mean())
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
mutate(MeanKWH = mean(KWH, na.rm=TRUE)) %>% summarise()
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
mutate(MeanKWH = mean(KWH, na.rm=TRUE)) %>% summarise(MeanKWH)
help(spread)
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
tidyr::spread(Type,Homes) %>% mutate(MeanKWH = mean(KWH, na.rm=TRUE)) %>% summarise()
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
tidyr::spread(UATYP10) %>% mutate(MeanKWH = mean(KWH, na.rm=TRUE)) %>% summarise()
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
tidyr::spread(UATYP10) %>% mutate(MeanKWH = mean(KWH, na.rm=TRUE)) %>% summarise()
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
tidyr::spread(UATYP10) #%>% mutate(MeanKWH = mean(KWH, na.rm=TRUE)) %>% summarise()
recs_tib %>%
transmute(State=REPORTABLE_DOMAIN, Type=TYPEHUQ, Weight = NWEIGHT) %>%
mutate(State=decode_all_states(State), Type=decode_all_house_types(Type)) %>%
group_by(State, Type) %>%
summarize(Homes=sum(Weight)) %>%
tidyr::spread(Type,Homes)
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(MeanKWH = mean(KWH, na.rm=TRUE)) %>% tidyr::spread(UATYP10, MeanKWH)
View(divisionEnergy)
# b)
# 'UATYP10'
#divisionEne
divisionEnergy = recs2015 %>% select(DIVISION, KWH) %>% group_by(DIVISION) %>%
mutate(MeanKWH = mean(KWH, na.rm=TRUE)) #%>% summarise(MeanKWH_Urban = mean())
View(divisionEnergy)
# b)
# 'UATYP10'
#divisionEne
divisionEnergy = recs2015 %>% select(DIVISION, KWH) %>% group_by(DIVISION) %>%
mutate(MeanKWH = mean(KWH, na.rm=TRUE)) %>% summarise()
View(divisionEnergy)
# b)
# 'UATYP10'
#divisionEne
divisionEnergy = recs2015 %>% select(DIVISION, KWH) %>% group_by(DIVISION) %>%
mutate(MeanKWH = mean(KWH, na.rm=TRUE)) %>% summarise(MeanKWH)
# b)
# 'UATYP10'
#divisionEne
divisionEnergy = recs2015 %>% select(DIVISION, KWH) %>% group_by(DIVISION) %>%
summarise(MeanKWH = mean(KWH, na.rm=TRUE))
View(divisionEnergy)
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(MeanKWH = mean(KWH, na.rm=TRUE)) %>% tidyr::spread(UATYP10, MeanKWH)
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(MeanKWH = mean(KWH, na.rm=TRUE)) %>% tidyr::spread(UATYP10, MeanKWH) %>%
select(DIVISION, R, U)
# c)
recs2015 %>% select(DIVISION, INTERNET) %>% group_by(DIVISION)
# c)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(Internet.Proportion = sum(Internet)) %>% tidyr::spread(UATYP10, Internet.Proportion) %>%
select(DIVISION, R, U)
# c)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(InternetProportion = sum(Internet)) %>%
tidyr::spread(UATYP10, InternetProportion) %>% select(DIVISION, R, U)
# c)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(InternetProportion = sum(INTERNET)) %>%
tidyr::spread(UATYP10, InternetProportion) %>% select(DIVISION, R, U)
# c)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(InternetProportion = sum(INTERNET)/count(INTERNET)) %>%
tidyr::spread(UATYP10, InternetProportion) %>% select(DIVISION, R, U)
# c)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(InternetProportion = sum(INTERNET)/tally(INTERNET)) %>%
tidyr::spread(UATYP10, InternetProportion) %>% select(DIVISION, R, U)
# c)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(InternetProportion = sum(INTERNET)/tally(DIVISION)) %>%
tidyr::spread(UATYP10, InternetProportion) %>% select(DIVISION, R, U)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
mutate(numUsers = tally())
# c)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
mutate(numUsers = tally(DIVISION))
# c)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
tally(DIVISION)
# c)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
tally(DIVISION) %>% summarise(InternetProportion = sum(INTERNET)/sum(n))
help(tally)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
add_tally(DIVISION)
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
add_tally(DIVISION) %>% summarise(InternetProportion = sum(INTERNET)/sum(n))
recs2015 %>% select(DIVISION, INTERNET, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
add_tally(DIVISION) %>% summarise(InternetProportion = sum(INTERNET)/sum(n)) %>%
tidyr::spread(UATYP10, InternetProportion) %>% select(DIVISION, R, U)
rm(list = ls())
#install.packages("nycflights13")
library(tidyverse)
# Function - CI: calculates 95% confidence interval of a given data set.
# Returns vector of lower and upper intervals
CI_Sample_Proportion = function(p, n){
xbar = p
sd = sqrt((p * (1 - p)) / n)
lower = xbar - qnorm(0.975, xbar, sd, lower.tail = TRUE) * sd
upper = xbar + qnorm(0.975, xbar, sd, lower.tail = TRUE) * sd
ci = c(lower, upper)
return(ci)
}
# For nyc2013 we drop months of
nyc2013 = nycflights13::flights
# We drop months of November and December from nyc2013 data
nyc2014 = as.tibble(read.csv('https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv'))
# We count the number of flights for each carrier, then compute their percent of total flights
numFlights2013 = filter(nyc2013, month != 11, month!= 12) %>% group_by(carrier) %>% tally()
numFlights2013$Percent_Flights2013 = numFlights2013$n / nrow(nyc2013)
# Here we figure out which of the airlines consist of more than 1% of total flights
numFlights2013 = numFlights2013 %>% filter(Percent_Flights2013 >= 0.01)
# Part B
# Setting up our Table
# STILL NEED TO FINISH
carrier_List_2013 = numFlights2013$carrier
numFlights2014 = filter(nyc2014, carrier %in% carrier_List_2013) %>% group_by(carrier) %>% tally()
numFlights2014$Percent_Flights2014 = numFlights2014$n / nrow(nyc2014)
#install.packages("nycflights13")
library(tidyverse)
# Function - CI: calculates 95% confidence interval of a given data set.
# Returns vector of lower and upper intervals
CI_Sample_Proportion = function(p, n){
sd = sqrt((p * (1 - p)) / n)
lower = p - qnorm(0.975, p, sd, lower.tail = TRUE) * sd
upper = p + qnorm(0.975, p, sd, lower.tail = TRUE) * sd
ci = c(lower, upper)
return(ci)
}
# For nyc2013 we drop months of
nyc2013 = nycflights13::flights
# We drop months of November and December from nyc2013 data
nyc2014 = as.tibble(read.csv('https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv'))
# We count the number of flights for each carrier, then compute their percent of total flights
numFlights2013 = filter(nyc2013, month != 11, month!= 12) %>% group_by(carrier) %>% tally()
numFlights2013$Percent_Flights2013 = numFlights2013$n / nrow(nyc2013)
# Here we figure out which of the airlines consist of more than 1% of total flights
numFlights2013 = numFlights2013 %>% filter(Percent_Flights2013 >= 0.01)
# Part B
# Setting up our Table
# STILL NEED TO FINISH
carrier_List_2013 = numFlights2013$carrier
numFlights2014 = filter(nyc2014, carrier %in% carrier_List_2013) %>% group_by(carrier) %>% tally()
numFlights2014$Percent_Flights2014 = numFlights2014$n / nrow(nyc2014)
flightData = merge(numFlights2013, numFlights2014, by = "carrier")
flightData[,c('lower_2013','upper_2013','lower_2014','upper_2014')] = NA
View(flightData)
p = 0.10383079
sd = sqrt((p * (1 - p)) / n)
n = nrow(nyc2013)
n
sd = sqrt((p * (1 - p)) / n)
sd
qnorm(0.975, p, sd, lower.tail = TRUE)
qnorm(0.975, 0, 1, lower.tail = TRUE)
CI_Sample_Proportion(p, n)
#install.packages("nycflights13")
library(tidyverse)
# Function - CI: calculates 95% confidence interval of a given data set.
# Returns vector of lower and upper intervals
CI_Sample_Proportion = function(p, n){
sd = sqrt((p * (1 - p)) / n)
lower = p - qnorm(0.975, 0, 1, lower.tail = TRUE) * sd
upper = p + qnorm(0.975, 0, 1, lower.tail = TRUE) * sd
ci = c(lower, upper)
return(ci)
}
# For nyc2013 we drop months of
nyc2013 = nycflights13::flights
# We drop months of November and December from nyc2013 data
nyc2014 = as.tibble(read.csv('https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv'))
# We count the number of flights for each carrier, then compute their percent of total flights
numFlights2013 = filter(nyc2013, month != 11, month!= 12) %>% group_by(carrier) %>% tally()
numFlights2013$Percent_Flights2013 = numFlights2013$n / nrow(nyc2013)
# Here we figure out which of the airlines consist of more than 1% of total flights
numFlights2013 = numFlights2013 %>% filter(Percent_Flights2013 >= 0.01)
# Part B
# Setting up our Table
# STILL NEED TO FINISH
carrier_List_2013 = numFlights2013$carrier
numFlights2014 = filter(nyc2014, carrier %in% carrier_List_2013) %>% group_by(carrier) %>% tally()
numFlights2014$Percent_Flights2014 = numFlights2014$n / nrow(nyc2014)
flightData = merge(numFlights2013, numFlights2014, by = "carrier")
flightData[,c('lower_2013','upper_2013','lower_2014','upper_2014')] = NA
for (j in 1:nrow(flightData)){
flightData[j, c('lower_2013','upper_2013')] =
CI_Sample_Proportion(flightData$Percent_Flights2013[j], nrow(nyc2013))
}
View(flightData)
for (j in 1:nrow(flightData)){
flightData[j, c('lower_2013','upper_2013')] =
CI_Sample_Proportion(flightData$Percent_Flights2013[j], nrow(nyc2013))
flightData[j, c('lower_2014','upper_2014')] =
CI_Sample_Proportion(flightData$Percent_Flights2014[j], nrow(nyc2014))
}
View(flightData)
# Question 3
library(readr)
library(tidyverse)
recs2015 = read_csv("recs2015_public_v3.csv")
# a)
divisionStuccoWall = recs2015  %>% group_by(DIVISION) %>% tally(WALLTYPE) %>% mutate(Proportion = n / sum(n)) %>%
filter(Proportion %in% c(min(Proportion),max(Proportion)))
# b)
divisionEnergy = recs2015 %>% select(DIVISION, KWH) %>% group_by(DIVISION) %>%
summarise(MeanKWH = mean(KWH, na.rm=TRUE))
recs2015 %>% select(DIVISION, KWH, UATYP10) %>% group_by(DIVISION, UATYP10) %>%
summarise(MeanKWH = mean(KWH, na.rm=TRUE)) %>% tidyr::spread(UATYP10, MeanKWH) %>%
select(DIVISION, R, U)
# c)
recs2015 %>%
select(DIVISION, INTERNET, UATYP10) %>%
group_by(DIVISION, UATYP10) %>%
add_tally(DIVISION) %>%
summarise(InternetProportion = sum(INTERNET)/sum(n)) %>%
tidyr::spread(UATYP10, InternetProportion) %>% select(DIVISION, R, U)
recs2015 %>%
transmute(Division = DIVISION,
InternetUsage = INTERNET,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
add_tally(Division) %>%
summarise(InternetProportion = sum(Internet) / sum(n)) %>%
tidyr::spread(UrbanRural, InternetProportion) %>% select(Division, R, U)
recs2015 %>%
transmute(Division = DIVISION,
InternetUsage = INTERNET,
UrbanRural = UATYP10)
recs2015 %>%
transmute(Division = DIVISION,
InternetUsage = INTERNET,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural)
recs2015 %>%
transmute(Division = DIVISION,
InternetUsage = INTERNET,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
add_tally(Division)
recs2015 %>%
transmute(Division = DIVISION,
InternetUsage = INTERNET,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
add_tally(Division) %>%
summarise(InternetProportion = sum(InternetUsage) / sum(n))
# c)
recs2015 %>%
transmute(Division = DIVISION,
InternetUsage = INTERNET,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
add_tally(Division) %>%
summarise(InternetProportion = sum(InternetUsage) / sum(n)) %>%
tidyr::spread(UrbanRural, InternetProportion) %>% select(Division, R, U)
recs2015 %>%
transmute(Division = DIVISION,
InternetUsage = INTERNET,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
add_tally(Division) %>%
summarise(InternetProportion = sum(InternetUsage) / sum(n)) %>%
tidyr::spread(UrbanRural, InternetProportion) %>%
transmute(Division = Division, Rural = R, Urban = U)
# c)
recs2015 %>%
transmute(Division = DIVISION,
InternetUsage = INTERNET,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
add_tally(Division) %>%
summarise(InternetProportion = sum(InternetUsage) / sum(n)) %>%
tidyr::spread(UrbanRural, InternetProportion) %>%
transmute(Division, Rural = R, Urban =U)
# c)
recs2015 %>%
transmute(Division = DIVISION,
InternetUsage = INTERNET,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
add_tally(Division) %>%
summarise(InternetProportion = sum(InternetUsage) / sum(n)) %>%
tidyr::spread(UrbanRural, InternetProportion) %>%
select(Division, Rural = R, Urban =U)
recs2015 %>%
select(Division = DIVISION,
KWH_Used = KWH,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
summarise(MeanKWH = mean(KWH_Used, na.rm = TRUE)) %>%
tidyr::spread(UrbanRuraal, MeanKWH) %>%
select(Division, Rural = R, Urban = U)
recs2015 %>%
select(Division = DIVISION,
KWH_Used = KWH,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
summarise(MeanKWH = mean(KWH_Used, na.rm = TRUE)) %>%
tidyr::spread(UrbanRural, MeanKWH) %>%
select(Division, Rural = R, Urban = U)
recs2015 %>%
select(Division = DIVISION,
KWH_Used = KWH,
UrbanRural = UATYP10) %>%
group_by(Division, UrbanRural) %>%
summarise(MeanKWH = mean(KWH_Used, na.rm = TRUE)) %>%
tidyr::spread(UrbanRural, MeanKWH) %>%
select(Division, Rural = R, Urban = U)
divisionEnergy = recs2015 %>%
select(Division = DIVISION,
KWH_Used = KWH) %>%
group_by(DIVISION) %>%
summarise(MeanKWH = mean(KWH_Used, na.rm = TRUE))
divisionEnergy = recs2015 %>%
select(Division = DIVISION,
KWH_Used = KWH) %>%
group_by(Division) %>%
summarise(MeanKWH = mean(KWH_Used, na.rm = TRUE))
flightData[,c('Change_Percentage',
'lower_2013',
'upper_2013',
'lower_2014',
'upper_2014',
'lower_Change_CI',
'upper_Change_CI',
'lower_Change2014',
'upper_Change2014')] = NA
flightData$Change_Percentage = Percent_Flights2014 - Percent_Flights2013
flightData$Change_Percentage =
flightData$Percent_Flights2014 - flightData$Percent_Flights2013
View(flightData)
# Change in Percent confidence bands
p1, p2 = c(1,2)
# Change in Percent confidence bands
p1,p2 = c(1,2)
# Change in Percent confidence bands
assign(c('p1', 'p2')) = c(1,2)
# Change in Percent confidence bands
assign(c(p1, p2)) = c(1,2)
# Change in Percent confidence bands
p1 = flightData$Percent_Flights2013; p2 = flightData$Percent_Flights2014;
View(p1)
se = sqrt((p1 * (1 - p1)) / n1 + (p2 * (1 - p2)) / n2)
#install.packages("nycflights13")
library(tidyverse)
# Function - CI: calculates 95% confidence interval of a given data set.
# Returns vector of lower and upper intervals
CI_Sample_Proportion = function(p, n){
sd = sqrt((p * (1 - p)) / n)
lower = p - qnorm(0.975, 0, 1, lower.tail = TRUE) * sd
upper = p + qnorm(0.975, 0, 1, lower.tail = TRUE) * sd
ci = c(lower, upper)
return(ci)
}
# For nyc2013 we drop months of
nyc2013 = nycflights13::flights
# We drop months of November and December from nyc2013 data
nyc2014 = as.tibble(read.csv('https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv'))
# We count the number of flights for each carrier, then compute their percent of total flights
numFlights2013 = filter(nyc2013, month != 11, month!= 12) %>%
group_by(carrier) %>%
tally()
numFlights2013$Percent_Flights2013 = numFlights2013$n / nrow(nyc2013)
# Here we figure out which of the airlines consist of more than 1% of total flights
numFlights2013 = numFlights2013 %>% filter(Percent_Flights2013 >= 0.01)
# Part B
# Setting up our Table
# STILL NEED TO FINISH
carrier_List_2013 = numFlights2013$carrier
numFlights2014 = filter(nyc2014, carrier %in% carrier_List_2013) %>%
group_by(carrier) %>%
tally()
numFlights2014$Percent_Flights2014 = numFlights2014$n / nrow(nyc2014)
flightData = merge(numFlights2013, numFlights2014, by = "carrier")
flightData[,c('Change_Percentage',
'lower_2013',
'upper_2013',
'lower_2014',
'upper_2014',
'lower_Change_CI',
'upper_Change_CI',
'lower_Change2014',
'upper_Change2014')] = NA
flightData$Change_Percentage =
flightData$Percent_Flights2014 - flightData$Percent_Flights2013
for (j in 1:nrow(flightData)){
# 2013 Confidence Intervals
flightData[j, c('lower_2013', 'upper_2013')] =
CI_Sample_Proportion(flightData$Percent_Flights2013[j],
nrow(nyc2013))
# 2014 Confidence Intervals
flightData[j, c('lower_2014', 'upper_2014')] =
CI_Sample_Proportion(flightData$Percent_Flights2014[j],
nrow(nyc2014))
# Change in Percent confidence bands
p1 = flightData$Percent_Flights2013[j]; n1 = nrow(nyc2013)
p2 = flightData$Percent_Flights2014[j]; n2 = nrow(nyc2014)
se = sqrt((p1 * (1 - p1)) / n1 + (p2 * (1 - p2)) / n2)
lower = (p2 - p1) + qnorm(0.975, 0, 1, lower.tail = TRUE) * se
upper = (p2 - p1) + qnorm(0.975, 0, 1, lower.tail = TRUE) * se
ci = c(lower, upper)
flightData[j, c('lower_Change_CI', 'upper_Change_CI')] = ci
}
#install.packages("nycflights13")
library(tidyverse)
# Function - CI: calculates 95% confidence interval of a given data set.
# Returns vector of lower and upper intervals
CI_Sample_Proportion = function(p, n){
sd = sqrt((p * (1 - p)) / n)
lower = p - qnorm(0.975, 0, 1, lower.tail = TRUE) * sd
upper = p + qnorm(0.975, 0, 1, lower.tail = TRUE) * sd
ci = c(lower, upper)
return(ci)
}
# For nyc2013 we drop months of
nyc2013 = nycflights13::flights
# We drop months of November and December from nyc2013 data
nyc2014 = as.tibble(read.csv('https://raw.githubusercontent.com/wiki/arunsrinivasan/flights/NYCflights14/flights14.csv'))
# We count the number of flights for each carrier, then compute their percent of total flights
numFlights2013 = filter(nyc2013, month != 11, month!= 12) %>%
group_by(carrier) %>%
tally()
numFlights2013$Percent_Flights2013 = numFlights2013$n / nrow(nyc2013)
# Here we figure out which of the airlines consist of more than 1% of total flights
numFlights2013 = numFlights2013 %>% filter(Percent_Flights2013 >= 0.01)
# Part B
# Setting up our Table
# STILL NEED TO FINISH
carrier_List_2013 = numFlights2013$carrier
numFlights2014 = filter(nyc2014, carrier %in% carrier_List_2013) %>%
group_by(carrier) %>%
tally()
numFlights2014$Percent_Flights2014 = numFlights2014$n / nrow(nyc2014)
flightData = merge(numFlights2013, numFlights2014, by = "carrier")
flightData[,c('Change_Percentage',
'lower_2013',
'upper_2013',
'lower_2014',
'upper_2014',
'lower_Change_CI',
'upper_Change_CI')] = NA
flightData$Change_Percentage =
flightData$Percent_Flights2014 - flightData$Percent_Flights2013
for (j in 1:nrow(flightData)){
# 2013 Confidence Intervals
flightData[j, c('lower_2013', 'upper_2013')] =
CI_Sample_Proportion(flightData$Percent_Flights2013[j],
nrow(nyc2013))
# 2014 Confidence Intervals
flightData[j, c('lower_2014', 'upper_2014')] =
CI_Sample_Proportion(flightData$Percent_Flights2014[j],
nrow(nyc2014))
# Change in Percent confidence bands
p1 = flightData$Percent_Flights2013[j]; n1 = nrow(nyc2013)
p2 = flightData$Percent_Flights2014[j]; n2 = nrow(nyc2014)
se = sqrt((p1 * (1 - p1)) / n1 + (p2 * (1 - p2)) / n2)
lower = (p2 - p1) + qnorm(0.975, 0, 1, lower.tail = TRUE) * se
upper = (p2 - p1) + qnorm(0.975, 0, 1, lower.tail = TRUE) * se
ci = c(lower, upper)
flightData[j, c('lower_Change_CI', 'upper_Change_CI')] = ci
}
View(flightData)
# Part C
newTable = nyc2013 %>%
group_by(origin) %>%
filter(carrier %in% carrier_List_2013) %>%
count(carrier)
newTable = rename(newTable, numFlights = n)
newTable = newTable %>%
mutate(Percent_Flights2013 = numFlights/nrow(nyc2013))
newTable %>% group_by(origin) %>%
filter(Percent_Flights2013 ==  max(Percent_Flights2013))
